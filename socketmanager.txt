import { Server } from "socket.io"  // Importing the Server class from the 'socket.io' library to create a Socket.io server

// Storing connections, messages, and timeOnline for users
let connections = {}   // Object to store users connected to each "room" (or path)
let messages = {}      // Object to store chat messages for each "room"
let timeOnline = {}    // Object to track the time each user is online

// Exporting a function that creates a Socket.io server
export const connectToSocket = (server) => {
    const io = new Server(server, {  // Creating a new Socket.io server and attaching it to the provided HTTP server
        cors: {  // Configuring Cross-Origin Resource Sharing (CORS) to allow any client to connect
            origin: "*",  // Allow connections from any domain
            methods: ["GET", "POST"],  // Allow these HTTP methods
            allowedHeaders: ["*"],  // Allow any headers
            credentials: true  // Allow cookies to be sent with requests
        }
    });

    // Listening for incoming connections from clients
    io.on("connection", (socket) => {

        console.log("SOMETHING CONNECTED")  // Log when a client successfully connects

        // When a client wants to join a call/room
        socket.on("join-call", (path) => {

            // If the room (path) doesn't exist, create a new array for it
            if (connections[path] === undefined) {
                connections[path] = []
            }
            
            // Add this socket (user) to the room's connection list
            connections[path].push(socket.id)
            
            // Record the time when the user connected
            timeOnline[socket.id] = new Date();

            // Notify all users in the room that a new user has joined
            for (let a = 0; a < connections[path].length; a++) {
                io.to(connections[path][a]).emit("user-joined", socket.id, connections[path])
            }

            // If there are any stored messages for this room, send them to the newly joined user
            if (messages[path] !== undefined) {
                for (let a = 0; a < messages[path].length; ++a++) {
                    io.to(socket.id).emit(
                        "chat-message", 
                        messages[path][a]['data'], 
                        messages[path][a]['sender'], 
                        messages[path][a]['socket-id-sender']
                    )
                }
            }
        })

        // Handling signals sent for WebRTC connections (used for video/audio calls)
        socket.on("signal", (toId, message) => {
            io.to(toId).emit("signal", socket.id, message);  // Forwarding the signal message to the intended recipient
        })

        // Handling chat messages
        socket.on("chat-message", (data, sender) => {

            // Finding the room where the current socket (user) is connected
            const [matchingRoom, found] = Object.entries(connections)
                .reduce(([room, isFound], [roomKey, roomValue]) => {
                    if (!isFound && roomValue.includes(socket.id)) {
                        return [roomKey, true];  // Return the room name if the socket ID is found
                    }
                    return [room, isFound];
                }, ['', false]);

            if (found === true) {  // If the user belongs to a room
                if (messages[matchingRoom] === undefined) {
                    messages[matchingRoom] = []  // Initialize the message list if it doesn't exist
                }

                // Add the new message to the message list
                messages[matchingRoom].push({
                    'sender': sender,
                    "data": data,
                    "socket-id-sender": socket.id
                })

                console.log("message", matchingRoom, ":", sender, data)

                // Send the new message to all users in the room
                connections[matchingRoom].forEach((elem) => {
                    io.to(elem).emit("chat-message", data, sender, socket.id)
                })
            }
        })

        // Handling user disconnection
        socket.on("disconnect", () => {

            var diffTime = Math.abs(timeOnline[socket.id] - new Date())  // Calculate time user was online

            var key  // This will store the room name

            // Loop over all rooms and their connections
            for (const [k, v] of JSON.parse(JSON.stringify(Object.entries(connections)))) {

                for (let a = 0; a < v.length; ++a) {
                    if (v[a] === socket.id) {  // If the user is found in a room
                        key = k  // Store the room name

                        // Notify all users in the room that this user left
                        for (let a = 0; a < connections[key].length; ++a) {
                            io.to(connections[key][a]).emit('user-left', socket.id)
                        }

                        // Remove the user from the room's connection list
                        var index = connections[key].indexOf(socket.id)
                        connections[key].splice(index, 1)

                        // If the room is now empty, delete it
                        if (connections[key].length === 0) {
                            delete connections[key]
                        }
                    }
                }
            }
        })
    })

    return io;  // Return the Socket.io server instance
}
